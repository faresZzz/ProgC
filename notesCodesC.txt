
#####################################################################################################################
Couleur.c
typedef struct couleur{
   int R;
   int G; 
   int B;
   int A;
}couleur;

int main()
{
    int tab_couleur[10][4] ={
        {0xFF, 0x57, 0x33, 0xA8},
        {0xC7, 0xFF, 0x33, 0x12},
        {0x5B, 0xA6, 0x65, 0xFF},
        {0x3B, 0xCA, 0xAB, 0x42},
        {0x12, 0x14, 0x66, 0xCD},
        {0x9B, 0x29, 0xAB, 0xD2},
        {0xDD, 0x28, 0xF5, 0x52},
        {0x37, 0xAF, 0x10, 0x66},
        {0x0E, 0xF3, 0xBF, 0x8A},
        {0x4C, 0x5A, 0x57, 0x6D},
        
        
    };
  
    
    couleur liste_couleur[10];
    
    for (int i = 0; i < 10; i++)
    {
        
       liste_couleur[i].R = tab_couleur[i][0];
       liste_couleur[i].G = tab_couleur[i][1];
       liste_couleur[i].B = tab_couleur[i][2];
       liste_couleur[i].A = tab_couleur[i][3];
    }
    for (int i = 0; i < 10; i++)
    {
        printf("couleur (R,G,B,A), (0x%x, 0x%x, 0x%x, 0x%x)\n", liste_couleur[i].R, liste_couleur[i].G, liste_couleur[i].B, liste_couleur[i].A);
    }
    
    
    
    
    printf("\n");
    return 0;
    
}

##############################################################################################################################
tableauptr.c

#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>




int main()
{
    int tab_int[10];
    int *ptr_int = tab_int;
    
    float tab_float[10];
    float *ptr_float = tab_float;
  
    
    srand(time(NULL));
    
    for (int i = 0; i < 10; i++)
    {
        *(ptr_int + i) = rand()%100;
        *(ptr_float + i) = (rand()%100);
    }
    
    for (int i = 0; i < 10; i++)
    {
        if ((i % 2) == 0)
        {
            *(ptr_int + i) *= 3;
            *(ptr_float + i) *= 3;
        }
    }
    printf("int\tfloat\n");
    for (int i = 0; i < 10; i++)
    {
        printf("%d\t%.2f\n",*(ptr_int + i), *(ptr_float + i));
    }
    
    
    
    
    printf("\n");
    return 0;
    
}

##############################################################################################################################
Min MAx

max = *(ptr_int);
    min = *(ptr_int);
    
    for (int i = 0; i < 100; i++)
    {
        if (*(ptr_int + i) > max)
        {
            max = *(ptr_int + i);
        }
        if (*(ptr_int + i) < min)
        {
            min = *(ptr_int + i);
        }
        
    }

##############################################################################################################################
TRI

int *pmin( int *tab_min, int size_min)
{
    int *ptr_min = tab_min;
    
    for (int i = 0; i < size_min; i++)
    {
        if (*(tab_min + i) < *ptr_min)
        {
            ptr_min = tab_min + i;
        }
        
    }
    
    return ptr_min;
}

int *pmax( int *tab_max, int size_max)
{
    int *ptr_max = tab_max;
    
    for (int i = 0; i < size_max; i++)
    {
        if (*(tab_max + i) > *ptr_max)
        {
            ptr_max = tab_max + i;
        }
    }
    return ptr_max;
}
/////////////////////////////////////////////////////////////////////////////////
void triBasic(int *ptr_tab, int size)
{
    int temp;
    for(int i = 0; i < size; i++)
    {
        for( int j = 0; j < 100; j++)
        {
            if (*(ptr_tab + i) < *(ptr_tab + j) )
            {
                temp = *(ptr_tab + i);
                *(ptr_tab + i) = *(ptr_tab + j);
                *(ptr_tab + j) = temp;
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
void triPlus(int *ptr_tab, int size)
{
    int temp;
    for(int i = 0; i < size; i++)
    {
        for( int j = i; j < 100; j++)
        {
            if (*(ptr_tab + i) > *(ptr_tab + j) )
            {
                temp = *(ptr_tab + i);
                *(ptr_tab + i) = *(ptr_tab + j);
                *(ptr_tab + j) = temp;
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
void triTop(int *ptr_debut, int size)
{   
    int *ptr_fin = ptr_debut + size;
    int temp_min;
    int temp_max;
    int *ptr_min;
    int *ptr_max;
    for(int i = 0; i < size; i++)
    {
        if (ptr_debut < ptr_fin)
        {
            temp_min = *ptr_debut;
            ptr_min = pmin(ptr_debut, size-i );
            *ptr_debut = *ptr_min;
            *ptr_min = temp_min;
            
            
            temp_max = *(ptr_fin);
            ptr_max = pmax(ptr_debut, size - i );
            *(ptr_fin) = *ptr_max;
            *ptr_max = temp_max;
            
            ptr_debut++;
        }
        else
        {
            break;
        }
    }
}


##################################################################################################################